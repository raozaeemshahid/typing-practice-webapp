import type { NextPage } from "next";
import { ChangeEvent, useEffect, useState } from "react";
import Head from "next/head";
import genText from "../functions/genText";
import type { charBox } from "../functions/genText";
import { v4 as uuid } from "uuid";
import SelectNoOfWords from "./SelectNoWords";

const Typing: NextPage<{ keyPressed: string[] }> = ({ keyPressed }) => {
  const [text, changeText] = useState<Array<charBox>>([]);
  const [taskcompleted, changeCompleted] = useState(-1);
  const [currentWriter, changeCurrentWriter] = useState<number>(0);
  const [noOfWords, changeNoOfWords] = useState<"random" | number>("random");

  useEffect(() => {
    changeCompleted(0);
    changeCurrentWriter(0);
    changeText(genText(noOfWords));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [noOfWords]);

  useEffect(() => {
    if (text[currentWriter] == undefined) return;
    if (keyPressed[0].length > 1) {
      if (keyPressed[0] == "Backspace") {
        text[currentWriter].completed = false;
        text[currentWriter].typedWrong = false;
        changeText([...text]);
        changeCurrentWriter(
          currentWriter > 0 ? currentWriter - 1 : currentWriter
        );
      }
      return;
    }
    if (keyPressed[0] === text[currentWriter].char) {
      text[currentWriter].typedWrong = false;
      text[currentWriter].completed = true;
    } else {
      text[currentWriter].typedWrong = true;
    }

    changeText([...text]);
    changeCurrentWriter(currentWriter + 1);

    if (currentWriter + 1 == text.length) {
      changeText(genText(noOfWords));
      changeCurrentWriter(0);
      changeCompleted(taskcompleted + 1);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [keyPressed]);

  const selectNoOfWords = (e: ChangeEvent<HTMLSelectElement>) => {
    if (e.target.value == "random") {
      changeNoOfWords("random");
    } else changeNoOfWords(parseInt(e.target.value));
  };

  return (
    <div className="pl-4 pt-4">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <SelectNoOfWords selectNoOfWords={selectNoOfWords} />

      <h1>Completed: {taskcompleted}</h1>
      <br />
      <div className="flex flex-wrap">
        {text?.map((box, index) => {
          return (
            <pre
              className={`
              ${box.completed ? "text-green-600" : ""} 
              ${index === currentWriter ? "text-blue-500 underline" : ""}
              ${box.typedWrong ? "text-red-600" : ""}
               border border-solid border-opacity-50 px-1 text-2xl
              `}
              key={uuid()}
            >
              {box.char}
            </pre>
          );
        })}
      </div>
    </div>
  );
};

export default Typing;
