import type { NextPage } from "next";
import { ChangeEvent, useEffect, useState } from "react";
import Head from "next/head";
import genTextObj from "../functions/genTextObj";
import type { charBox } from "../functions/genTextObj";
import { v4 as uuid } from "uuid";

const Typing: NextPage = () => {
  const [text, changeText] = useState<Array<charBox>>([]);
  const [taskcompleted, changeCompleted] = useState(-1);
  const [currentWriter, changeCurrentWriter] = useState<number>(0);
  const [noOfWords, changeNoOfWords] = useState<"random" | number>("random");

  const numbers1to100 = [];
  for (let i = 1; i <= 100; i++) numbers1to100.push(i);

  const setText = () => {
    const newText: Array<charBox> = genTextObj(noOfWords);
    changeText([...newText]);
    return newText;
  };

  useEffect(() => {
    changeCompleted(0);
    changeCurrentWriter(0);
    setText();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [noOfWords]);

  const onType = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.value === text[currentWriter].char) {
      text[currentWriter].completed = true;
      text[currentWriter].typedWrong = false;
      changeText([...text]);
      changeCurrentWriter(currentWriter + 1);

      if (currentWriter + 1 == text.length) {
        setText();
        changeCurrentWriter(0);
        changeCompleted(taskcompleted + 1);
      }
    } else {
      text[currentWriter].typedWrong = true;
      changeText([...text]);
    }
    e.target.value = "";
  };

  const selectNoOfWords = (e: ChangeEvent<HTMLSelectElement>) => {
    if (e.target.value == "random") {
      changeNoOfWords("random");
    } else changeNoOfWords(parseInt(e.target.value));
  };

  return (
    <div className="pl-4 pt-4">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex">
        <pre>No Of Words: </pre>
        <select name="NoOfWords" id="noofwords" onChange={selectNoOfWords}>
          <option value="random">Random</option>
          {numbers1to100.map((num) => {
            return (
              <option value={`${num}`} key={num}>
                {num}
              </option>
            );
          })}
        </select>
      </div>
      <h1>Completed: {taskcompleted}</h1>
      <br />
      <div className="flex flex-wrap">
        {text?.map((box, index) => {
          return (
            <pre
              className={`${box.completed ? "text-green-600" : ""} ${
                index === currentWriter ? "text-blue-500 underline" : ""
              } ${box.typedWrong ? "text-red-600" : ""} border border-solid border-opacity-50 px-1 text-2xl
              `}
              key={uuid()}
            >
              {box.char}
            </pre>
          );
        })}
      </div>
      <input
        type="text"
        placeholder="Start Typing Here..."
        onChange={onType}
        autoFocus
      />
    </div>
  );
};

export default Typing;
